diff --git a/src/shared/dissect-image.c b/src/shared/dissect-image.c
index d2446de..65db255 100644
--- a/src/shared/dissect-image.c
+++ b/src/shared/dissect-image.c
@@ -1978,81 +1978,8 @@ static inline char* dm_deferred_remove_clean(char *name) {
 DEFINE_TRIVIAL_CLEANUP_FUNC(char *, dm_deferred_remove_clean);
 
 static int validate_signature_userspace(const VeritySettings *verity) {
-#if HAVE_OPENSSL
-        _cleanup_(sk_X509_free_allp) STACK_OF(X509) *sk = NULL;
-        _cleanup_strv_free_ char **certs = NULL;
-        _cleanup_(PKCS7_freep) PKCS7 *p7 = NULL;
-        _cleanup_free_ char *s = NULL;
-        _cleanup_(BIO_freep) BIO *bio = NULL; /* 'bio' must be freed first, 's' second, hence keep this order
-                                               * of declaration in place, please */
-        const unsigned char *d;
-        int r;
-
-        assert(verity);
-        assert(verity->root_hash);
-        assert(verity->root_hash_sig);
-
-        /* Because installing a signature certificate into the kernel chain is so messy, let's optionally do
-         * userspace validation. */
-
-        r = conf_files_list_nulstr(&certs, ".crt", NULL, CONF_FILES_REGULAR|CONF_FILES_FILTER_MASKED, CONF_PATHS_NULSTR("verity.d"));
-        if (r < 0)
-                return log_debug_errno(r, "Failed to enumerate certificates: %m");
-        if (strv_isempty(certs)) {
-                log_debug("No userspace dm-verity certificates found.");
-                return 0;
-        }
-
-        d = verity->root_hash_sig;
-        p7 = d2i_PKCS7(NULL, &d, (long) verity->root_hash_sig_size);
-        if (!p7)
-                return log_debug_errno(SYNTHETIC_ERRNO(EINVAL), "Failed to parse PKCS7 DER signature data.");
-
-        s = hexmem(verity->root_hash, verity->root_hash_size);
-        if (!s)
-                return log_oom_debug();
-
-        bio = BIO_new_mem_buf(s, strlen(s));
-        if (!bio)
-                return log_oom_debug();
-
-        sk = sk_X509_new_null();
-        if (!sk)
-                return log_oom_debug();
-
-        STRV_FOREACH(i, certs) {
-                _cleanup_(X509_freep) X509 *c = NULL;
-                _cleanup_fclose_ FILE *f = NULL;
-
-                f = fopen(*i, "re");
-                if (!f) {
-                        log_debug_errno(errno, "Failed to open '%s', ignoring: %m", *i);
-                        continue;
-                }
-
-                c = PEM_read_X509(f, NULL, NULL, NULL);
-                if (!c) {
-                        log_debug("Failed to load X509 certificate '%s', ignoring.", *i);
-                        continue;
-                }
-
-                if (sk_X509_push(sk, c) == 0)
-                        return log_oom_debug();
-
-                TAKE_PTR(c);
-        }
-
-        r = PKCS7_verify(p7, sk, NULL, bio, NULL, PKCS7_NOINTERN|PKCS7_NOVERIFY);
-        if (r)
-                log_debug("Userspace PKCS#7 validation succeeded.");
-        else
-                log_debug("Userspace PKCS#7 validation failed: %s", ERR_error_string(ERR_get_error(), NULL));
-
-        return r;
-#else
-        log_debug("Not doing client-side validation of dm-verity root hash signatures, OpenSSL support disabled.");
+        log_debug("Not doing client-side validation of dm-verity root hash signatures, PKCS7 support disabled.");
         return 0;
-#endif
 }
 
 static int do_crypt_activate_verity(
